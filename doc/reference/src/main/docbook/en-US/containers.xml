<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="containers">
   <title>Target containers</title>

   <para>
      Arquillian's forte is not only in its ease of use, but also in its flexibility. Good integration testing is not
      just about testing in <emphasis>any</emphasis> container, but rather testing in the container
      <emphasis>you</emphasis> are targeting.  It's all too easy to kid ourselves by validating components in a
      specialized testing container, only to realize that the small variations causes the components fail when it comes
      time to deploy to the application for real. To make tests count, you want to execute them in the real container.
   </para>

   <para>
      Arquillian supports a variety of target containers out of the box, which will be covered in this chapter. If the
      container you are using isn't supported, Arquillian makes it very easy to plug in your own implementation.
   </para>

   <section>
      <title>Container varieties</title>

      <para>
         You can run the same test case against various containers with Arquillian. The test class does not reference
         the container directly, which means you don't get locked into a proprietary test environment. It also means you
         can select the optimal container for development or easily test the compatibility of your application.
      </para>

      <para>
         Arquillian recognizes three container interaction styles:
      </para> 

      <orderedlist>
         <listitem>
            <para>a <emphasis>remote</emphasis> container resides in a separate JVM from the test runner; Arquillian binds to the container to
            deploy and undeploy the test archive and invokes tests via a remote protocol (typically HTTP)</para>
         </listitem>
         <listitem>
            <para>an <emphasis>embedded</emphasis> container resides in the same JVM as the test runner; lifecycle managed by Arquillian; tests
            are executed via a local protocol for containers without a web component (e.g., Embedded EJB) and via a
            remote protocol for containers that have a web component (e.g., Embedded Java EE)</para>
         </listitem>
         <listitem>
            <para>a <emphasis>managed</emphasis> container is the same as a remote container, but in addition, its
            lifecycle (startup/shutdown) is managed by Arquillian and is run as a separate process</para>
         </listitem>
      </orderedlist>

      <para>
         Containers can be further classified by their capabilities. There are three common catagories:
      </para>

      <orderedlist>
         <listitem>
            <para>A fully compliant Java EE application server (e.g., GlassFish, JBoss AS, Embedded GlassFish)</para>
         </listitem>
         <listitem>
            <para>A Servlet container (e.g., Jetty, Tomcat)</para>
         </listitem>
         <listitem>
            <para>A standalone bean container (e.g., Weld SE, Spring)</para>
         </listitem>
      </orderedlist>

      <para>
         Arquillian provides SPIs that handle each of the tasks involved in controlling the runtime environment,
         executing the tests and aggregating the results. So in theory, you can support just about any environment that
         can be controlled with the set of hooks you are given.
      </para>

   </section>

   <section>
      <title>Container management</title>

      <para>
         While the management of an <emphasis>embedded</emphasis> container is straightforward, you may wonder how
         Arquillian knows where the remote and managed containers are installed. Actually, Arquillian only needs to know
         the install path of <emphasis>managed</emphasis> containers (e.g., jbossas-managed-6). In this case, since
         Arquillian manages the container process, it must have access to the container's startup script. For managed
         JBoss AS containers, the install path is read from the environment variable JBOSS_HOME.
      </para>

      <para>
         For <emphasis>remote</emphasis> containers (e.g., jbossas-remote-6), Arquillian simply needs to know that the
         container is running and communicates with it using a remote protocol (e.g., JNDI). For remote JBoss AS
         containers, the JNDI settings are set in a jndi.properties file on the classpath. You also have to set the
         remote address and HTTP port in the container configuration if they differ from the default values (localhost
         and 8080 for JBoss AS, respectively).
      </para>

   </section>

   <section>
      <title>Supported containers</title>

      <para>
         The implementations provided so far are shown in the table below. Also listed is the artifactId of the JAR that
         provides the implementation. To execute your tests against a container, you must include the artifactId that
         corresponds to that container on the classpath. Use the following Maven profile definition as a template to add
         support for a container to your Maven build, replacing %artifactId% with the artifactId from the table. You
         then activate the profile when executing the tests just as you did in the <xref linkend="gettingstarted"/>
         chapter.
      </para>

      <programlisting role="XML"><![CDATA[<profile>
   <id>%artifactId%</id>
   <dependencies>
      <dependency>
         <groupId>org.jboss.arquillian.container</groupId>
         <artifactId>%artifactId%</artifactId>
         <version>${arquillian.version}</version>
      </dependency>
   </dependencies>
</profile>]]></programlisting>

      <table frame="all">
         <title>Target containers supported by Arquillian</title>
         <tgroup cols="4">
            <colspec colnum="1" colname="name" colwidth="3*"/>
            <colspec colnum="2" colname="type" colwidth="2*"/>
            <colspec colnum="3" colname="compliance" colwidth="2*"/>
            <colspec colnum="4" colname="artifactId" colwidth="3*"/>
            <thead>
               <row>
                  <entry>Container name</entry>
                  <entry>Container type</entry>
                  <entry>Spec compliance</entry>
                  <entry>artifactId</entry>
               </row>
            </thead>
            <tbody>
               <row>
                 <entry><link linkend="container.jbossas-remote-5">JBoss AS 5</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-remote-5</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-remote-51">JBoss AS 5.1</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-remote-5.1</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-managed-51">JBoss AS 5.1</link></entry>
                 <entry>managed</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-managed-5.1</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-remote-6">JBoss AS 6.0 M4</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-remote-6</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-managed-6">JBoss AS 6.0 M4</link></entry>
                 <entry>managed</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-managed-6</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-embedded-6">JBoss AS 6.0 M4</link></entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-embedded-6</entry>
               </row>
               <row>
                 <entry><link linkend="container.reloaded-embedded-1">JBoss Reloaded 1.0</link></entry>
                 <entry>embedded</entry>
                 <entry>JBoss MC</entry>
                 <entry>arquillian-reloaded-embedded-1</entry>
               </row>
               <row>
                 <entry><link linkend="container.glassfish-embedded-3">GlassFish 3.0</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-glassfish-remote-3</entry>
               </row>
               <row>
                 <entry><link linkend="container.glassfish-embedded-3">GlassFish 3.0</link></entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-glassfish-embedded-3</entry>
               </row>
               <row>
                 <entry><link linkend="container.tomcat-embedded-6">Tomcat 6.0</link></entry>
                 <entry>embedded</entry>
                 <entry>Servlet 2.5</entry>
                 <entry>arquillian-tomcat-embedded-6</entry>
               </row>
               <row>
                 <entry><link linkend="container.tomcat-embedded-6">Jetty 6.1</link></entry>
                 <entry>embedded</entry>
                 <entry>Servlet 2.5</entry>
                 <entry>arquillian-jetty-embedded-6.1</entry>
               </row>
               <row>
                 <entry><link linkend="container.jetty-embedded-7">Jetty 7.0</link></entry>
                 <entry>embedded</entry>
                 <entry>Servlet ~3.0</entry>
                 <entry>arquillian-jetty-embedded-7</entry>
               </row>
               <row>
                 <entry><link linkend="container.weld-se-embedded-1">Weld SE 1.0</link></entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-weld-se-embedded-1</entry>
               </row>
               <row>
                 <entry><link linkend="container.weld-ee-embedded-11">Weld EE 1.1</link></entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-weld-ee-embedded-1.1</entry>
               </row>
               <row>
                 <entry><link linkend="container.ironjacamar-embedded-1">IronJacamar 1.0</link></entry>
                 <entry>embedded</entry>
                 <entry>JCA 1.6</entry>
                 <entry>org.jboss.ironjacamar:ironjacamar-embedded-arquillian</entry>
               </row>
               <row>
                 <entry><link linkend="container.openwebbeans-embedded">Apache OpenWebBeans 1.0</link></entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-openwebbeans-embedded-1</entry>
               </row>
               <row>
                 <entry><link linkend="container.openejb-embedded">Apache OpenEJB 3.1</link></entry>
                 <entry>embedded</entry>
                 <entry>EJB 3.0</entry>
                 <entry>arquillian-openejb-embedded-3.1</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>
         Support for other containers is planned, including Weblogic (remote), WebSphere (remote) and Hibernate.
      </para>

   </section>

	<section id="containers.configuration">
		<title>Container configuration</title>
		
		<para>
			You can come a long way with default values, but at some point you may need to customize some of the container 
			settings to fit your environment. We're going to have a look at how this can be done with Arquillian. 
			Arquillian will look for a file named <filename>arquillian.xml</filename> in the root of your classpath. 
			If it exists it will be auto loaded, else default values will be used. So this file is not a requirement.
		</para>
		
		<para>
			Lets imagine that we're working for the company <literal>example.com</literal> and in our environment we have two servers; 
			<literal>test.example.com</literal> and <literal>hudson.example.com</literal>. <literal>test.example.com</literal> 
			is the JBoss instance we use for our integration tests and <literal>hudson.example.com</literal> is our continuous integration server 
			that we want to run our integration suite from. By default, Arquillian will use localhost, so we need to tell it to use 
			<literal>test.example.com</literal> to run the tests. 
		</para>
		
		<programlisting role="XML"><![CDATA[<?xml version="1.0"?>
	
<arquillian xmlns="http://jboss.com/arquillian"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jboss="urn:arq:org.jboss.arquillian.container.jbossas.remote_6">

 <engine>
   <deploymentExportPath>/tmp</deploymentExportPath>
 </engine>
	
 <jboss:container>
   <jboss:remoteServerAddress>test.example.com</jboss:remoteServerAddress>
   <jboss:remoteServerHttpPort>8181</jboss:remoteServerHttpPort>
   <jboss:localDeploymentBindAddress>
    hudson.example.com
   </jboss:localDeploymentBindAddress>
   <jboss:localDeploymentBindPort>7000</jboss:localDeploymentBindPort>
 </jboss:container>	

</arquillian>]]></programlisting>
		
		<para>
			That should do it! "Each type of container has it's own XML namespace for configuration - here we use the JBoss AS 6.0 
			Remote container. Each container has different configuration options. Next step is to create a 
			<literal>container</literal> element in that namespace and add the options you want to configure inside. 
			In this example we're saying that the server we want to test against can be found on
			address <literal>test.example.com</literal> using port 8181, and the remote server can communicate back to us 
			on address <literal>hudson.example.com</literal> on port 7000. Some containers expect to be given a URL from which 
			they can retrieve the application to be deployed. For these containers, Arquillian will start a local HTTP server. 
		</para>
		
		<tip>
			For a complete overview of all the containers and their configuration options, 
			see <xref linkend="container.reference"/>
		</tip>
		
		<warning>
			Some containers require a jndi.properties file on classpath with the containers standard
			JNDI properties for the initial connection.
		</warning>
	</section>
<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
