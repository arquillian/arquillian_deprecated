<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="extension.drone">
   <title>Drone</title>

   <para id="extension.drone.description">The Arquillian Drone extension for Arquillian provides a
   simple way of including functional tests for your web based application. Arquillian Drone manages
   the life cycle of web testing tool, which is either Arquillian Ajocado, Selenium or WebDriver.
   Arquillian Drone automatically manages life cycle of objects required for interaction between
   browser and deployed application.</para>

   <para />

   <sect2>
      <title>Commented Example</title>

      <para>Following example illustrates how Arquillian Drone can be used with Arquillian Ajocado.
      This example is a part of Arquillian Drone test classes, so you are free to experiment with
      it. Arquillian Ajocado is a Selenium on steroids, because it provides type safe API over
      classic <literal>DefaultSelenium</literal> object, has extended support for handling AJAX
      based UI and adds pretty fast JQuery locators to you browser, so your test are executed
      faster. If you are not experienced with Arquillian Ajocado, you can still use
      <literal>DefaultSelenium</literal> or WebDriver specific browser, such as
      <literal>FirefoxDriver</literal>. The beauty of Arquillian Drone is that is supports all of
      them and their usage is pretty much the same.</para>

      <programlisting role="JAVA"><![CDATA[package org.jboss.arquillian.drone.example;

import static org.jboss.arquillian.ajocado.Ajocado.elementPresent;
import static org.jboss.arquillian.ajocado.Ajocado.waitModel;
import static org.jboss.arquillian.ajocado.guard.request.RequestTypeGuardFactory.waitHttp;
import static org.jboss.arquillian.ajocado.locator.LocatorFactory.id;
import static org.jboss.arquillian.ajocado.locator.LocatorFactory.xp;

import java.net.URL;

import org.jboss.arquillian.ajocado.framework.AjaxSelenium;
import org.jboss.arquillian.ajocado.locator.IdLocator;
import org.jboss.arquillian.ajocado.locator.XpathLocator;
import org.jboss.arquillian.api.Run;
import org.jboss.arquillian.drone.annotation.ContextPath;
import org.jboss.arquillian.drone.annotation.Drone;
import org.jboss.arquillian.junit.Arquillian;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Tests Arquillian Drone extension against Weld Login example. * 
 * Uses Ajocado driver bound to Firefox browser.
 * 
 */
@RunWith(Arquillian.class)
public class AjocadoTestCase extends AbstractTestCase
{
   // load ajocado driver
   @Drone
   AjaxSelenium driver;

   // Load context path to the test
   @ContextPath
   URL contextPath;

   protected XpathLocator LOGGED_IN = xp("//li[contains(text(),'Welcome')]");
   protected XpathLocator LOGGED_OUT = xp("//li[contains(text(),'Goodbye')]");

   protected IdLocator USERNAME_FIELD = id("loginForm:username");
   protected IdLocator PASSWORD_FIELD = id("loginForm:password");

   protected IdLocator LOGIN_BUTTON = id("loginForm:login");
   protected IdLocator LOGOUT_BUTTON = id("loginForm:logout");

   @Deployment(testable=false)
   public static WebArchive createDeployment()
   {
      return ShrinkWrap.create(WebArchive.class, "weld-login.war")
            .addClasses(Credentials.class, LoggedIn.class, Login.class, User.class, Users.class)            
            .addAsWebInfResource(new File("src/test/webapp/WEB-INF/beans.xml"))
            .addAsWebInfResource(new File("src/test/webapp/WEB-INF/faces-config.xml"))            
            .addAsWebInfResource(new File("src/test/resources/import.sql"))
            .addAsWebResource(new File("src/test/webapp/index.html"))
            .addAsWebResource(new File("src/test/webapp/home.xhtml"))
            .addAsWebResource(new File("src/test/webapp/template.xhtml"))
            .addAsWebResource(new File("src/test/webapp/users.xhtml"))
            .addAsResource(new File("src/test/resources/META-INF/persistence.xml"), ArchivePaths.create("META-INF/persistence.xml"))
            .setWebXML(new File("src/test/webapp/WEB-INF/web.xml"));
   }

   @Test
   public void testLoginAndLogout()
   {
      driver.open(contextPath);
      waitModel.until(elementPresent.locator(USERNAME_FIELD));      
      Assert.assertFalse("User should not be logged in!", driver.isElementPresent(LOGOUT_BUTTON));
      driver.type(USERNAME_FIELD, "demo");
      driver.type(PASSWORD_FIELD, "demo");
      
      waitHttp(driver).click(LOGIN_BUTTON);
      Assert.assertTrue("User should be logged in!", driver.isElementPresent(LOGGED_IN));
      
      waitHttp(driver).click(LOGOUT_BUTTON);
      Assert.assertTrue("User should not be logged in!", driver.isElementPresent(LOGGED_OUT));
   }

}
]]></programlisting>

      <para>As you can see, execution does not differ from common Arquillian test much. The only
      requirement is actually running Arquillian in client mode, which is enforced by marking
      deployment as <literal>utestable = false</literal> or alternatively by
      <literal>@RunAsClient</literal> annotation. The other annotations present in the test are used
      to inject web test framework instance (<literal>@Drone</literal>) and context path
      (<literal>@ContextPath</literal>) for deployed archive into your test. Their life cycle is
      completely managed by Arquillian Drone, as described in <xref
      linkend="extensions.drone.lifecycle" />. The instance is used in test method to traverse UI of
      application via Firefox browser, fill user credentials and signing up and out. Test is based
      on JUnit, but Arquillian Drone, as well as the rest of Arquillian supports TestNG as
      well.</para>

      <table>
         <title>Supported frameworks and their tested versions</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry align="center">Framework name and implementation class</entry>

                  <entry align="center">Tested version</entry>

                  <entry align="center">Additional information</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>Arquillian Ajocado - <code>AjaxSelenium</code></entry>

                  <entry>1.0.0.Alpha1</entry>

                  <entry>Requires Selenium Server running</entry>
               </row>

               <row>
                  <entry>Selenium - <code>DefaultSelenium</code></entry>

                  <entry>2.0b2</entry>

                  <entry>Requires Selenium Server running</entry>
               </row>

               <row>
                  <entry>Selenium - <code>HtmlUnitDriver</code>, <code>FirefoxDriver</code></entry>

                  <entry>2.0b2</entry>

                  <entry>Selenium Server is not required</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>This combination matrix is tested and known to work. However, we expect that all
      <literal>WebDriver</literal> interface based browsers will work. Arquillian Drone does not
      force you to use a specific version of web framework test implementation, so feel free to
      experiment with it.</para>
   </sect2>

   <sect2>
      <title>Maven setup example</title>

      <para>Arquillian Drone requires a few test dependencies which are marked as provided to let
      you choose their versions. Add following code into your Maven dependecies to enable Arquillian
      Drone functionality in your test cases.</para>

      <programlisting role="XML"><![CDATA[<!-- Arquillian Drone dependency -->
<dependency>
   <groupId>org.jboss.arquillian.extension</groupId>
   <artifactId>arquillian-drone</artifactId>
   <version>${arquillian.version}</version>
   <scope>test</scope>
</dependency>

<!-- Arquillian Ajocado dependencies -->
<dependency>
   <groupId>org.jboss.arquillian.ajocado</groupId>
   <artifactId>arquillian-ajocado-api</artifactId>
   <version>${version.ajocado}</version>
   <scope>test</scope>
</dependency>
<dependency>
   <groupId>org.jboss.arquillian.ajocado</groupId>
   <artifactId>arquillian-ajocado-impl</artifactId>
   <version>${version.ajocado}</version>
   <scope>test</scope>
</dependency>

<!-- Selenium (including WebDriver in 2.x versions) -->
<dependency>
   <groupId>org.seleniumhq.selenium</groupId>
   <artifactId>selenium-remote-control</artifactId>
   <version>${version.selenium}</version>
   <scope>test</scope>        
</dependency>
<dependency>
   <groupId>org.seleniumhq.selenium</groupId>
   <artifactId>selenium-server</artifactId>
   <version>${version.selenium}</version>
   <scope>test</scope>
</dependency>
      
<!-- required to run Selenium Server, needed if you want Arquillian Drone to start Selenium Server for you -->
<dependency>
   <groupId>org.slf4j</groupId>
   <artifactId>slf4j-simple</artifactId>  <!-- choose different underlying implementation if you want -->
   <version>${version.slf4j}</version>  <!-- up to you, tested with 1.5.10 -->
   <scope>test</scope>
</dependency>

]]></programlisting>
   </sect2>

   <sect2 id="extensions.drone.lifecycle">
      <title>Life cycle of @Drone objects</title>

      <para>Arquillian Drone does not allow you to control life cycle of web testing framework
      objects, but it provides two different scenarios which should be sufficient for most usages
      required by developers. These are</para>

      <orderedlist>
         <listitem>
            <para>Class based life cycle</para>
         </listitem>

         <listitem>
            <para>Method based life cycle</para>
         </listitem>
      </orderedlist>

      <para>For class based life cycle, configuration for the instance is created before a test
      class is run. This configuration is used to propertly initialize an instance of the tool. The
      instance is injected into the field and hold until the last test in the test class is
      finished, then it is disposed. You can think of <literal>@BeforeClass</literal> and
      <literal>@AfterClass</literal> equivalents. On the other hand, for method based life cycle, an
      instance is configured and created before Arquillian enters test method and it is disposed
      after method finishes. You can think of <literal>@Before</literal> and
      <literal>@After</literal> equivalents.</para>

      <para>It is import to know that you can combines multiple instances in one tests and you can
      have them in different scopes. You can as well combine different framework types. Following
      example shows class based life cycle instance <literal>foo</literal> of type
      <literal>AjaxSelenium</literal> (Arquillian Ajocado) combined with method based life cycle
      <literal>bar</literal> of type <literal>DefaultSelenium</literal> (Selenium).</para>
      <programlisting role="JAVA"><![CDATA[@RunWith(Arquillian.class)
@RunAs(AS_CLIENT)
public class EnrichedClass
{
   @Drone AjaxSelenium foo;

   public void testRatherWithSelenium(@Drone DefaultSelenium bar)
   {
     ...
   }
}]]></programlisting>
   </sect2>

   <sect2>
      <title>Keeping multiple @Drone instances of the same type</title>

      <para>With Arquillian Drone, it is possible to keep more than one instance of a web test
      framework tool of the same type and determine which instance to use in a type safe way.
      Arquillian Drone uses concept of <literal>@Qualifier</literal>, which may be known to you from
      CDI. <literal>@Qualifier</literal> is a meta-annotations which allows you to annotate
      annotation you create to tell instances appart. By default, if no
      <literal>@Qualifier</literal> annotation is present, Arquillian Drone uses
      <literal>@Default</literal>. Following code defines new qualifying annotation</para>
      <programlisting role="JAVA"><![CDATA[package org.jboss.arquillian.drone.factory;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.jboss.arquillian.drone.spi.Qualifier;

@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.FIELD, ElementType.PARAMETER })
@Qualifier
public @interface Different
{

}]]></programlisting>

      <para>Once you have defined a qualifier, you can use it in you tests, for example in following
      way, having two distinct class based life cycle instances of
      <literal>DefaultSelenium</literal>.</para>
      <programlisting role="JAVA"><![CDATA[@RunWith(Arquillian.class)
@RunAs(AS_CLIENT)
public class EnrichedClass
{
   @Drone DefaultSelenium foo;
   @Drone @Different DefaultSelenium bar;

   public void testWithBothFooAndBar()
   {
     ...
   }
}]]></programlisting>
   </sect2>

   <sect2>
      <title>Configuring @Drone instances</title>

      <para>@Drone instances are automatically configured from arquillian.xml descriptor file, with
      possibility of overridding arquillian.xml configuration by system properties. Every type of
      @Drone instance has its own configuration namespace, although namespace overlap in areas where
      it makes sense, such as sharing a part of configuration between Selenium and Selenium server.
      System properties always take precedence.</para>

      <para>If you are using @Qualifiers, you can use them to modify configuration, such as create a
      special configuration for a method based life cycle browser. </para>

      <table>
         <title>Arquillian Ajocado configuration</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry align="center">Property name</entry>

                  <entry align="center">Default value</entry>

                  <entry align="center">Description</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>contextRoot</entry>

                  <entry>http://localhost:8080</entry>

                  <entry>Web Server URL</entry>
               </row>

               <row>
                  <entry>contextPath</entry>

                  <entry>(empty)</entry>

                  <entry>Application URL of your deployed application</entry>
               </row>

               <row>
                  <entry>browser</entry>

                  <entry>*firefox</entry>

                  <entry>Browser type, following Selenium conventions</entry>
               </row>

               <row>
                  <entry>resourcesDirectory</entry>

                  <entry>target/test-classes</entry>

                  <entry>Directory where additional resources are stored</entry>
               </row>

               <row>
                  <entry>buildDirectory</entry>

                  <entry>target</entry>

                  <entry>Directory where application is built</entry>
               </row>

               <row>
                  <entry>seleniumHost</entry>

                  <entry>localhost</entry>

                  <entry>Name of the machine where Selenium server is running</entry>
               </row>

               <row>
                  <entry>seleniumPort</entry>

                  <entry>14444</entry>

                  <entry>Port on machine where Selenium server is running</entry>
               </row>

               <row>
                  <entry>seleniumMaximize</entry>

                  <entry>false</entry>

                  <entry>Maximize browser window</entry>
               </row>

               <row>
                  <entry>seleniumDebug</entry>

                  <entry>false</entry>

                  <entry>Produce debug output in browser console</entry>
               </row>

               <row>
                  <entry>seleniumNetworkTrafficEnabled</entry>

                  <entry>false</entry>

                  <entry>Capture network traffic in browser console</entry>
               </row>

               <row>
                  <entry>seleniumSpeed</entry>

                  <entry>0</entry>

                  <entry>Delay in ms before each command is sent</entry>
               </row>

               <row>
                  <entry>seleniumTimeoutDefault</entry>

                  <entry>30000</entry>

                  <entry>Default timeout in ms</entry>
               </row>

               <row>
                  <entry>seleniumTimeoutGui</entry>

                  <entry>5000</entry>

                  <entry>Timeout of GUI wait in ms</entry>
               </row>

               <row>
                  <entry>seleniumTimeoutAjax</entry>

                  <entry>15000</entry>

                  <entry>Timeout of AJAX wait in ms</entry>
               </row>

               <row>
                  <entry>seleniumTimeoutModel</entry>

                  <entry>30000</entry>

                  <entry>Timout of Model wait in ms</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>Arquillian Ajocado uses <literal>ajacodo</literal> namespace. This means, you can define
      properties either in arquillian.xml</para>
      <programlisting role="XML"><![CDATA[<extension qualifier="ajocado">
   <configuration>
      <property name="seleniumHost">myhost.org</property>
   </configuration>
</extension>]]></programlisting>

      <para>Or you can convert property name to name of system property, using following formula
      <function>arqullian. + (namespace) + . + (property name converted to dotted
      lowercase)</function>. For instance, <literal>seleniumNetworkTrafficEnabled</literal> will be
      converted to <literal>arquillian.ajocado.selenium.network.traffic.enabled</literal> System
      property name.</para>

      <table>
         <title>Selenium configuration</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry align="center">Property name</entry>

                  <entry align="center">Default value</entry>

                  <entry align="center">Description</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>serverPort</entry>

                  <entry>14444</entry>

                  <entry>Port on machine where Selenium server is running</entry>
               </row>

               <row>
                  <entry>serverHost</entry>

                  <entry>localhost</entry>

                  <entry>Name of the machine where Selenium server is running</entry>
               </row>

               <row>
                  <entry>url</entry>

                  <entry>http://localhost:8080</entry>

                  <entry>Web Server URL</entry>
               </row>

               <row>
                  <entry>timeout</entry>

                  <entry>60000</entry>

                  <entry>Default timeout in ms</entry>
               </row>

               <row>
                  <entry>speed</entry>

                  <entry>0</entry>

                  <entry>Delay in ms before each command is sent</entry>
               </row>

               <row>
                  <entry>browser</entry>

                  <entry>*firefox</entry>

                  <entry>Browser type, following Selenium conventions</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>Selenium uses <literal>selenium</literal> namespace.</para>

      <table>
         <title>WebDriver configuration</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry align="center">Property name</entry>

                  <entry align="center">Default value</entry>

                  <entry align="center">Description</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>implementationClass</entry>

                  <entry>org.openqa.selenium.htmlunit.HtmlUnitDriver</entry>

                  <entry>Determines which browser instance is created for WebDriver testing</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>WebDriver uses <literal>webdriver</literal> namespace.</para>

      <table>
         <title>Selenium Server configuration</title>

         <tgroup cols="3">
            <thead>
               <row>
                  <entry align="center">Property name</entry>

                  <entry align="center">Default value</entry>

                  <entry align="center">Description</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>port</entry>

                  <entry>14444</entry>

                  <entry>Port on machine where to start Selenium Server</entry>
               </row>

               <row>
                  <entry>host</entry>

                  <entry>localhost</entry>

                  <entry>Name of the machine where to start Selenium Server</entry>
               </row>

               <row>
                  <entry>output</entry>

                  <entry>target/selenium-server-output.log</entry>

                  <entry>Name of file where to redirrect Selenium Server logger</entry>
               </row>

               <row>
                  <entry>enable</entry>

                  <entry>false</entry>

                  <entry>Enable Arquillian to start Selenium Server</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>Selenium Server uses <literal>selenium-server</literal> namespace. 
      
      <warning>
      <para>
      Please note that
      non-letter characters are converted to dots, so for instance to enable Selenium via System
      property, you have to set <literal>arquillian.selenium.server.enable</literal> to
      <literal>true</literal>. 
      </para>
      </warning>
      Selenium Server has different life cycle than @Drone instance, it is
      created and started before test suite and disposed after test suite. If you have your own
      Selenium Server instance running, you simply omit its configuration, however specifying it is
      the simplest way how to start it and have it managed by Arquillian.</para>

      <para>If you are wondering how to define configuration for <literal>@Qualifier</literal>
      <literal>@Drone</literal> instance, it's very easy. Only modification you have to do is to
      change namespace to include - (<literal>@Qualifier</literal> annotation name converted to
      lowercase). Please note, that for System properties are all non-letter characters converted to
      dots. For instance, if you qualified Arquillian Ajocado instance with @MyExtraBrowser, its
      namespace will become ajocado-myextrabrowser.</para>

      <para>The namespace resolution is a bit more complex. Arquillian Drone will search for
      configuration in following order:</para>

      <orderedlist>
         <listitem>
            <para>Search for the exact match of namespace (e.g.
            <literal>ajocado-myextrabrowser</literal>) in arqullian.xml, if found, step 2 is not
            performed</para>
         </listitem>

         <listitem>
            <para>Search for a match of base namespace, without qualifier (e.g.
            <literal>ajocado</literal>) in arqullian.xml</para>
         </listitem>
      </orderedlist>
   </sect2>

   <para>Then System property overriddes are applied in the same fashion.</para>

   <sect2 id="extension.selenium.customization">
      <title>Arquillian Drone SPI</title>

      <para>The big advantage of Arquillian Drone extension is its flexibility. We provide you
      reasonable defaults, but if they are not sufficient or if they do not fulfill your needs, you
      can change them. You can change behaviour of existing implemenation or implement support for
      your own testing framework. See JavaDoc/sources for more details, here is an enumeration of
      classes you should focus on:</para>

      <variablelist>
         <varlistentry>
            <term>org.jboss.arquillian.drone.spi.Configurator&lt;T, C&gt;</term>

            <listitem>
               <para>Provides a way how to configure configurations of type C for <literal>
                     <literal>@Drone</literal>
                  </literal> object of type T</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>org.jboss.arquillian.drone.spi.Instantiator&lt;T, C&gt;</term>

            <listitem>
               <para>Provides a way how to instantiate <literal>@Drone</literal> object of type T
               with configuration C</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>org.jboss.arquillian.drone.spi.Destructor&lt;T&gt;</term>

            <listitem>
               <para>Provides a way how to dispose <literal>@Drone</literal> object of type T</para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>org.jboss.arquillian.drone.spi.DroneConfiguration</term>

            <listitem>
               <para>This is effectivelly a marker for configuration of type C </para>
            </listitem>
         </varlistentry>
      </variablelist>

      <para>The import note is that implemenation of Configurator, Instantiator and Destructor are
      searched on the class path and they are sorted according to precedence they declare.
      Arquillian Ajocado default implemenation has precedence of 0, so if your implementation has
      bigger precedence and instantiates type T with configuration C, Arquillian Drone will use it.
      This provides you the ultimate way how to change behavior if desired. Of course, you can
      provide support for your own framework in the very same way, so in your test you can use
      <literal>@Drone</literal> annotation to manage instance of arbitrary web testing
      framework.</para>

      <para>Arquillian Drone SPI extensions are searched via descriptions in META-INF/services on
      class path. For instance, to override DefaultSelenium instantiator, create file
      META-INF/services/org.jboss.arquillian.drone.spi.Instantiator with following
      content:</para>
      <programlisting role="JAVA"><![CDATA[fully.quallified.name.of.my.implementation.Foo]]></programlisting>
      <para>Your class <literal>Foo</literal> must implement
      <literal>Instantiator&lt;DefaultSelenium,SeleniumConfiguration&gt;</literal> interface.</para>
   </sect2>
</section>
